variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - infra
  - build
  - release
  - deploy

terraform:
  stage: infra
  image: alpine:3.15.0
  before_script:
    - apk add bash terraform
    - export TF_VAR_cloud_id=${TF_VAR_CLOUD_ID}
    - export TF_VAR_token=${TF_VAR_TOKEN}
    - export TF_VAR_ssh_login=${TF_VAR_SSH_LOGIN}
    - export TF_VAR_ssh_public_key=${TF_VAR_SSH_PUBLIC_KEY}
    - cd terraform
    - mv .terraformrc ~/.terraformrc 
    - terraform --version
    - terraform init -backend-config="access_key=${TF_VAR_ACCESS_KEY}" -backend-config="secret_key=${TF_VAR_SECRET_KEY}"
  script:
    - terraform validate
    - terraform plan -out "planfile"
    - terraform apply -input=false "planfile"

build-bingo:
  stage: build
  image:
    name: "gcr.io/kaniko-project/executor:debug"
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache-repo=$CI_REGISTRY_IMAGE/bingo/cache --cache=true --context "${CI_PROJECT_DIR}/bingo" --dockerfile "${CI_PROJECT_DIR}dockerfile" --destination "$CI_REGISTRY_IMAGE/bingo:$CI_COMMIT_SHA" --registry-mirror mirror.gcr.io --registry-mirror index.docker.io

upload-bingo-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/bingo:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/bingo:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/bingo:latest
    - docker push $CI_REGISTRY_IMAGE/bingo:latest

init-bingo:
  stage: deploy
  image: docker:20.10.12-dind
  before_script:
    - apk add openssh-client bash  docker-compose docker-cli-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ${CONFIG} ${DEV_USER}@${NODE_1}:/etc/config.yaml
    - export DOCKER_HOST="ssh://${DEV_USER}@${NODE_1}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose stop init-bingo && docker-compose rm -f init-bingo && docker compose pull init-bingo && docker-compose up -d init-bingo
    - sleep 1200
    - docker-compose stop init-bingo && docker-compose rm -f init-bingo
  rules:
    - when: manual

deploy-bingo:
  stage: deploy
  image: docker:20.10.12-dind
  environment:
    name: prod-bingo
  before_script:
    - apk add openssh-client bash  docker-compose docker-cli-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export DOCKER_HOST="ssh://${DEV_USER}@${NODE_1}"
    - scp ${CONFIG} ${DEV_USER}@${NODE_1}:/etc/config.yaml
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose stop bingo && docker-compose rm -f bingo && docker compose pull bingo && docker-compose up -d bingo
    - sleep 40
    - scp ${CONFIG} ${DEV_USER}@${NODE_2}:/etc/config.yaml
    - export DOCKER_HOST="ssh://${DEV_USER}@${NODE_2}"
    - docker-compose stop bingo && docker-compose rm -f bingo && docker compose pull bingo && docker-compose up -d bingo
  rules:
    - when: manual



